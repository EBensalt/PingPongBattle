    @Get('online')
    async getOnline(@Req() req) {
        return (await this.userService.getOnline(req.user.id));
    }
    @Get('offline')
    async getOffline(@Req() req) {
        return (await this.userService.getOffline(req.user.id));
    }

async getOnline(id: number) {
    try {
        await this.prismaservice.user.update({
            where: {id: id},
            data: {
                state: 'online'
            },
        })
    } catch(error) {
        throw new NotFoundException('USER NOT FOUND');
    }
}

async getOffline(id: number) {
    try {
        await this.prismaservice.user.update({
            where: {id: id},
            data: {
                state: 'offline'
            },
        })
    } catch(error) {
        throw new NotFoundException('USER NOT FOUND');
    }
}



    useEffect(() => {
		const	socket = io(import.meta.env.VITE_API_BASE_URL);

        socket.on("connect", async () => {
            await axios.get("/user/online").then((res) => {
                console.log("res.data: ", res.data);
                // socket.emit("user/connect", username);
            }).catch(err => {
                console.error("Error in fetching online: ", err);
            })
            // socket.emit("user/connect", username);
        })

        socket.on("disconnect", async () => {
            await axios.get("/user/offline")
            .then((res) => {
                console.log("res.data: ", res.data);
            }).catch(err => {
                console.error("Error in sending socket id: ", err);
            })
        })

        window.onbeforeunload = null;

        const handleBeforeUnload = async () => {
            // ev.preventDefault();
            socket.disconnect();
            await axios.get("/user/offline");
        };
        window.addEventListener("beforeunload", handleBeforeUnload)

		return () => {
            socket.disconnect();
            window.removeEventListener("beforeunload", handleBeforeUnload);
		}
	}, []);