// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int      @id @unique @default(autoincrement())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  email         String            @unique
  hash          String?
  username      String            @unique
  firstName     String?
  lastName      String?
  upAvatar      Boolean           @default(false)
  avatar        String?
  state         String            @default("Offline")
  twoFaAuth     Boolean
  level         Float             @default(0.00)
  win           Int               @default(0)
  loss          Int               @default(0)
  twoFaSecret   Json?
  friends       User[]            @relation("Friends")
  friendOf      User[]            @relation("Friends")
  blocked       User[]            @relation("Blocked")
  blockedFrom   User[]            @relation("Blocked")
  achievement   Json?
  MatchHistory  MatchHistory[]
  socket        String?           @unique
  chatUsers     User[]            @relation("ChatUsers")
  chatUsersOf   User[]            @relation("ChatUsers")
  chatHistorys  UserCHATHISTORY[]
  groups        UserGROUP[]
  notifications Notifications[]
}

model MatchHistory {
  id           Int      @id @unique @default(autoincrement())
  createAt     DateTime @default(now())
  players      User[]
  playerId     Int
  player2Id    Int
  playerScore  Int
  player2Score Int
}

model CHATHISTORY {
  id       Int      @id @unique @default(autoincrement())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  name     String            @unique
  messages MESSAGE[]
  users    UserCHATHISTORY[]
}

model MESSAGE {
  id Int @id @unique @default(autoincrement())

  sender        String
  message       String
  // avatar        String?
  chathistoryid Int
  chathistory   CHATHISTORY @relation(fields: [chathistoryid], references: [id])
}

model UserCHATHISTORY {
  userid        Int
  user          User        @relation(fields: [userid], references: [id])
  chathistoryid Int
  chathistory   CHATHISTORY @relation(fields: [chathistoryid], references: [id])

  @@id([userid, chathistoryid])
}

model GROUP {
  id Int @id @unique @default(autoincrement())

  name    String      @unique
  owner   String
  admins  String[]
  members UserGROUP[]
  state   String
  hash    String?
  banded  String[]
  muted   String[]
  invited String[]
}

model UserGROUP {
  userid  Int
  user    User  @relation(fields: [userid], references: [id])
  groupId Int
  group   GROUP @relation(fields: [groupId], references: [id])

  @@id([userid, groupId])
}

model Notifications {
  id        Int     @id @unique @default(autoincrement())
  createAt  DateTime @default(now())
  userId    Int
  user      User    @relation(fields: [userId], references: [id])
  senderId  Int
  type      String
  groupname String?
}
